import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.ReadContext;

import java.io.File;
import java.util.List;

public class JsonTransformer {
    public static void main(String[] args) throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // 1) Load schema and data
        JsonNode schema = mapper.readTree(new File("schema.json"));
        JsonNode data   = mapper.readTree(new File("data.json"));

        // 2) Prepare a JsonPath context on the raw data
        String dataStr = mapper.writeValueAsString(data);
        ReadContext ctx = JsonPath.parse(dataStr);

        // 3) Create an output ObjectNode
        ObjectNode output = mapper.createObjectNode();

        // 4) For each "registeredAttributes" entry...
        for (JsonNode regAttr : schema.get("registeredAttributes")) {
            String namespace = regAttr.get("namespace").asText();
            JsonNode propGroups = regAttr.get("propertygroups");
            JsonNode attrs = regAttr.get("attributeList");

            // a) If there's a property‐group, build an array
            if (propGroups.isArray() && propGroups.size() > 0) {
                JsonNode pg = propGroups.get(0);
                String pgJsonPath = pg.get("jsonPath").asText();

                // Read the list of elements under that group
                List<Object> items = ctx.read(pgJsonPath);

                ArrayNode arr = mapper.createArrayNode();
                for (Object item : items) {
                    // Create a JsonPath context for the single item
                    String itemJson = mapper.writeValueAsString(item);
                    ReadContext itemCtx = JsonPath.parse(itemJson);

                    ObjectNode obj = mapper.createObjectNode();
                    for (JsonNode attr : attrs) {
                        String name = attr.get("attributeName").asText();
                        String path = attr.get("jsonPath").asText();
                        Object val = itemCtx.read(path);
                        obj.set(name, mapper.valueToTree(val));
                    }
                    arr.add(obj);
                }

                output.set(namespace, arr);

            // b) Otherwise, build a flat object
            } else {
                ObjectNode obj = mapper.createObjectNode();
                for (JsonNode attr : attrs) {
                    String name = attr.get("attributeName").asText();
                    String path = attr.get("jsonPath").asText();
                    Object val = ctx.read(path);
                    obj.set(name, mapper.valueToTree(val));
                }
                output.set(namespace, obj);
            }
        }

        // 5) Emit the result
        System.out.println(
            mapper.writerWithDefaultPrettyPrinter()
                  .writeValueAsString(output)
        );
    }
}
