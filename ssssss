import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.ReadContext;

import java.io.File;
import java.util.List;

public class JsonTransformer {
    public static void main(String[] args) throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // 1) Load schema and data
        JsonNode schema = mapper.readTree(new File("schema.json"));
        JsonNode data   = mapper.readTree(new File("data.json"));

        // 2) Prepare a JsonPath context on the raw data
        String dataStr = mapper.writeValueAsString(data);
        ReadContext ctx = JsonPath.parse(dataStr);

        // 3) Create the root output object
        ObjectNode output = mapper.createObjectNode();

        // 4) Process each namespace in "registeredAttributes"
        for (JsonNode regAttr : schema.get("registeredAttributes")) {
            String namespace     = regAttr.get("namespace").asText();
            JsonNode propGroups  = regAttr.get("propertygroups");
            JsonNode attrs       = regAttr.get("attributeList");

            // Create one object per namespace
            ObjectNode nsNode = mapper.createObjectNode();

            // 4a) First, build any arrays for property‚Äêgroups
            for (JsonNode pg : propGroups) {
                String groupName = pg.get("name").asText();          // e.g. "parameters"
                String groupPath = pg.get("jsonPath").asText();      // e.g. "$.params[*]"

                // Read the list under that path
                List<Object> items = ctx.read(groupPath);
                ArrayNode arr = mapper.createArrayNode();

                for (Object item : items) {
                    // For each element, we need a new JsonPath context
                    String itemJson = mapper.writeValueAsString(item);
                    ReadContext itemCtx = JsonPath.parse(itemJson);

                    // Build one object per element of this group
                    ObjectNode itemObj = mapper.createObjectNode();
                    for (JsonNode attr : attrs) {
                        // Only those attributes that belong to this group
                        if (attr.has("propertygroup") &&
                            groupName.equals(attr.get("propertygroup").asText()))
                        {
                            String name = attr.get("attributeName").asText();
                            String path = attr.get("jsonPath").asText();  // relative to the item
                            Object val  = itemCtx.read(path);
                            itemObj.set(name, mapper.valueToTree(val));
                        }
                    }
                    arr.add(itemObj);
                }

                nsNode.set(groupName, arr);
            }

            // 4b) Next, pull in any standalone attributes (no "propertygroup")
            for (JsonNode attr : attrs) {
                if (!attr.has("propertygroup")) {
                    String name = attr.get("attributeName").asText();
                    String path = attr.get("jsonPath").asText();     // absolute in the root data
                    Object val  = ctx.read(path);
                    nsNode.set(name, mapper.valueToTree(val));
                }
            }

            // 4c) Attach this namespace object to the root
            output.set(namespace, nsNode);
        }

        // 5) Print the transformed JSON
        System.out.println(
            mapper.writerWithDefaultPrettyPrinter()
                  .writeValueAsString(output)
        );
    }
}
